
bin/Debug/Homework2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000870  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001255  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001c65  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 00 	call	0xde	; 0xde <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T1delay>:

#include <avr/io.h>
//#define DDRB (*((volatile char *) 0x24))
//#define PORTB (*((volatile char *) 0x25))

void T1delay() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    TCNT1H = 0x85; //set Timer to 0x85EE
  88:	85 e8       	ldi	r24, 0x85	; 133
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	25 e8       	ldi	r18, 0x85	; 133
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
    TCNT1L = 0xEE;
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2e ee       	ldi	r18, 0xEE	; 238
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
    TCCR1A = 0x00;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
    TCCR1B = 0x02; //set to 1024 prescaler in normal mode
  a4:	81 e8       	ldi	r24, 0x81	; 129
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	22 e0       	ldi	r18, 0x02	; 2
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18

    while ((TIFR1 & 0X02)==0);
  ae:	00 00       	nop
  b0:	86 e3       	ldi	r24, 0x36	; 54
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	80 81       	ld	r24, Z
  b8:	88 2f       	mov	r24, r24
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	82 70       	andi	r24, 0x02	; 2
  be:	99 27       	eor	r25, r25
  c0:	89 2b       	or	r24, r25
  c2:	b1 f3       	breq	.-20     	; 0xb0 <T1delay+0x30>
    TCCR1B = 0;
  c4:	81 e8       	ldi	r24, 0x81	; 129
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
    TIFR1 = 0x04;
  cc:	86 e3       	ldi	r24, 0x36	; 54
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	24 e0       	ldi	r18, 0x04	; 4
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
}
  d6:	00 00       	nop
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
    DDRB |= 0x02; //initialize pin 1 as output
  e6:	84 e2       	ldi	r24, 0x24	; 36
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	24 e2       	ldi	r18, 0x24	; 36
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	20 81       	ld	r18, Z
  f2:	22 60       	ori	r18, 0x02	; 2
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18

    while(1) {
        PORTB |= 0x02; // toggle pin on
  f8:	85 e2       	ldi	r24, 0x25	; 37
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	25 e2       	ldi	r18, 0x25	; 37
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	22 60       	ori	r18, 0x02	; 2
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
        T1delay(); // wait 2s
 10a:	0e 94 40 00 	call	0x80	; 0x80 <T1delay>
        PORTB &= 0xFD; // toggle pin off
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	25 e2       	ldi	r18, 0x25	; 37
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	2d 7f       	andi	r18, 0xFD	; 253
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
        T1delay(); // wait 2s
 120:	0e 94 40 00 	call	0x80	; 0x80 <T1delay>
    }
 124:	e9 cf       	rjmp	.-46     	; 0xf8 <main+0x1a>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
