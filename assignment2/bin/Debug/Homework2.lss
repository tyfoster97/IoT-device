
bin/Debug/Homework2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000894  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000126d  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
//#define DDRB (*((volatile char *) 0x24))
//#define PORTB (*((volatile char *) 0x25))
#define SIM_TIME 35
#define HARD_TIME 100

void delay(int ms) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <delay+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9e 83       	std	Y+6, r25	; 0x06
  90:	8d 83       	std	Y+5, r24	; 0x05
    int i, j;
    for(i = 1; i < ms; i++) {
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9a 83       	std	Y+2, r25	; 0x02
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	13 c0       	rjmp	.+38     	; 0xc2 <delay+0x42>
        for(j = 1; j < SIM_TIME; j++) {
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	9c 83       	std	Y+4, r25	; 0x04
  a2:	8b 83       	std	Y+3, r24	; 0x03
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <delay+0x30>
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	9c 81       	ldd	r25, Y+4	; 0x04
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	9c 83       	std	Y+4, r25	; 0x04
  ae:	8b 83       	std	Y+3, r24	; 0x03
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	83 97       	sbiw	r24, 0x23	; 35
  b6:	bc f3       	brlt	.-18     	; 0xa6 <delay+0x26>
#define SIM_TIME 35
#define HARD_TIME 100

void delay(int ms) {
    int i, j;
    for(i = 1; i < ms; i++) {
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	9a 83       	std	Y+2, r25	; 0x02
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	8d 81       	ldd	r24, Y+5	; 0x05
  c8:	9e 81       	ldd	r25, Y+6	; 0x06
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	34 f3       	brlt	.-52     	; 0x9c <delay+0x1c>
        for(j = 1; j < SIM_TIME; j++) {
        }
    }
}
  d0:	00 00       	nop
  d2:	26 96       	adiw	r28, 0x06	; 6
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <main>:

int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
    DDRB |= 0x02; //initialize pin 1 as output
  ec:	84 e2       	ldi	r24, 0x24	; 36
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e2       	ldi	r18, 0x24	; 36
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	22 60       	ori	r18, 0x02	; 2
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18

    while(1) {
        PORTB |= 0x02; // toggle pin on
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	25 e2       	ldi	r18, 0x25	; 37
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	22 60       	ori	r18, 0x02	; 2
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
        delay(2000); // wait 2s
 110:	80 ed       	ldi	r24, 0xD0	; 208
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	0e 94 40 00 	call	0x80	; 0x80 <delay>
        PORTB &= 0xFD; // toggle pin off
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	25 e2       	ldi	r18, 0x25	; 37
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	2d 7f       	andi	r18, 0xFD	; 253
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
        delay(2000); // wait 2s
 12a:	80 ed       	ldi	r24, 0xD0	; 208
 12c:	97 e0       	ldi	r25, 0x07	; 7
 12e:	0e 94 40 00 	call	0x80	; 0x80 <delay>
    }
 132:	e5 cf       	rjmp	.-54     	; 0xfe <main+0x1a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
