
bin/Debug/Homework2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000888  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001265  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T1delay>:

#include <avr/io.h>
//#define DDRB (*((volatile char *) 0x24))
//#define PORTB (*((volatile char *) 0x25))

void T1delay() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <T1delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <T1delay+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    unsigned int i, j;
    for(i = 1; i < 1000; i++) {
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	13 c0       	rjmp	.+38     	; 0xbc <T1delay+0x3c>
        for(j=1; j < 60; j++) {}
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9c 83       	std	Y+4, r25	; 0x04
  9c:	8b 83       	std	Y+3, r24	; 0x03
  9e:	05 c0       	rjmp	.+10     	; 0xaa <T1delay+0x2a>
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	9c 81       	ldd	r25, Y+4	; 0x04
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	9c 83       	std	Y+4, r25	; 0x04
  a8:	8b 83       	std	Y+3, r24	; 0x03
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	cc 97       	sbiw	r24, 0x3c	; 60
  b0:	b8 f3       	brcs	.-18     	; 0xa0 <T1delay+0x20>
//#define DDRB (*((volatile char *) 0x24))
//#define PORTB (*((volatile char *) 0x25))

void T1delay() {
    unsigned int i, j;
    for(i = 1; i < 1000; i++) {
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	9a 83       	std	Y+2, r25	; 0x02
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	88 3e       	cpi	r24, 0xE8	; 232
  c2:	93 40       	sbci	r25, 0x03	; 3
  c4:	40 f3       	brcs	.-48     	; 0x96 <T1delay+0x16>
        for(j=1; j < 60; j++) {}
    }
}
  c6:	00 00       	nop
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
    DDRB |= 0x02; //initialize pin 1 as output
  de:	84 e2       	ldi	r24, 0x24	; 36
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	24 e2       	ldi	r18, 0x24	; 36
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	22 60       	ori	r18, 0x02	; 2
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18

    while(1) {
        PORTB |= 0x02; // toggle pin on
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	25 e2       	ldi	r18, 0x25	; 37
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	22 60       	ori	r18, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
        T1delay(); // wait 2s
 102:	0e 94 40 00 	call	0x80	; 0x80 <T1delay>
        PORTB &= 0xFD; // toggle pin off
 106:	85 e2       	ldi	r24, 0x25	; 37
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	25 e2       	ldi	r18, 0x25	; 37
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	2d 7f       	andi	r18, 0xFD	; 253
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
        T1delay(); // wait 2s
 118:	0e 94 40 00 	call	0x80	; 0x80 <T1delay>
    }
 11c:	e9 cf       	rjmp	.-46     	; 0xf0 <main+0x1a>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
