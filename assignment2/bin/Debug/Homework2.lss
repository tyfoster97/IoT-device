
bin/Debug/Homework2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000870  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000125d  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001c91  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:

#include <avr/io.h>
//#define DDRB (*((volatile char *) 0x24))
//#define PORTB (*((volatile char *) 0x25))

void delay(int ms) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
    TCNT1H = 0x85;
  8e:	85 e8       	ldi	r24, 0x85	; 133
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	25 e8       	ldi	r18, 0x85	; 133
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
    TCNT1L = 0xEE; //set timer
  98:	84 e8       	ldi	r24, 0x84	; 132
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2e ee       	ldi	r18, 0xEE	; 238
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
    TCCR1A |= 0x00; //start timer
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	20 e8       	ldi	r18, 0x80	; 128
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
    TCCR1B |= 0x05; //set timer to 1024 prescaler mode
  b2:	81 e8       	ldi	r24, 0x81	; 129
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	21 e8       	ldi	r18, 0x81	; 129
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	20 81       	ld	r18, Z
  be:	25 60       	ori	r18, 0x05	; 5
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
    while ((TIFR1 & (1 << TOV1 )) > 0);
  c4:	00 00       	nop
  c6:	86 e3       	ldi	r24, 0x36	; 54
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	99 27       	eor	r25, r25
  d6:	18 16       	cp	r1, r24
  d8:	19 06       	cpc	r1, r25
  da:	ac f3       	brlt	.-22     	; 0xc6 <delay+0x46>
    TIFR1 &= ~(1 << TOV1); //reset overflow flag
  dc:	86 e3       	ldi	r24, 0x36	; 54
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	26 e3       	ldi	r18, 0x36	; 54
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	2e 7f       	andi	r18, 0xFE	; 254
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
}
  ee:	00 00       	nop
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
    DDRB |= 0x02; //initialize pin 1 as output
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e2       	ldi	r18, 0x24	; 36
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	22 60       	ori	r18, 0x02	; 2
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18

    while(1) {
        PORTB |= 0x02; // toggle pin on
 114:	85 e2       	ldi	r24, 0x25	; 37
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	25 e2       	ldi	r18, 0x25	; 37
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	22 60       	ori	r18, 0x02	; 2
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
        delay(2000); // wait 2s
 126:	80 ed       	ldi	r24, 0xD0	; 208
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	0e 94 40 00 	call	0x80	; 0x80 <delay>
        PORTB &= 0xFD; // toggle pin off
 12e:	85 e2       	ldi	r24, 0x25	; 37
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	25 e2       	ldi	r18, 0x25	; 37
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	2d 7f       	andi	r18, 0xFD	; 253
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
        delay(2000); // wait 2s
 140:	80 ed       	ldi	r24, 0xD0	; 208
 142:	97 e0       	ldi	r25, 0x07	; 7
 144:	0e 94 40 00 	call	0x80	; 0x80 <delay>
    }
 148:	e5 cf       	rjmp	.-54     	; 0x114 <main+0x1a>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
